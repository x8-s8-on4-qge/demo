# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

#name: Java CI with Maven
#
#on:
#  push:
#    branches: [ "main" ]
#  pull_request:
#    branches: [ "main" ]
#
#jobs:
#  build:
#
#    runs-on: ubuntu-latest
#
#    steps:
#    - uses: actions/checkout@v4
#    - name: Set up JDK 17
#      uses: actions/setup-java@v4
#      with:
#        java-version: '17'
#        distribution: 'temurin'
#        cache: maven
#    - name: Build with Maven
#      run: mvn -B package --file pom.xml
#
#    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
#    - name: Update dependency graph
#      uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6

name: Docker CI/CD

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'デプロイ環境'
        required: true
        default: 'stg'
        type: choice
        options:
          - stg
          - prod

jobs:
  build:
    # ランナー(OS)は、Linuxを指定
    runs-on: ubuntu-latest
    steps:
      # 1.クローン
      - name: Check out repository code
        uses: actions/checkout@v2

      # 2.Java設定
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'

      # 3.Maven Install
      - name: Build with Maven
        run: ./mvnw clean install

      # 4.Dockerイメージをビルド
      - name: Build Docker Image
        run: |
          docker compose build

#      # 5.Docker Hubにログイン
#      - name: Log in to Docker Hub
#        uses: docker/login-action@v3
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#
#      - name: Push Docker image to DockerHub
#        run: |
#          docker image tag demo x8s8on4qge/demo:latest
#          docker image push x8s8on4qge/demo:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # ※作成中。Render.comのAPIを調べる。とりあえず、Copilotの結果を貼り付け
      - name: Deploy to Render.com
        run: |
          curl -X POST \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
            "serviceId": "your-service-id",
            "clearCache": true
          }' \
          https://api.render.com/v1/services/your-service-id/deploys
